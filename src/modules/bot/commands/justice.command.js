import range from '../../../core/utils/functions/range.js'
import { addNexiaKeys, CommandType } from './index.js'
import addNexiaCommand from './add-nexia.command.js'
import NexiaService from '../../nexias/Nexia.service.js'

const justiceCommand = async (ctx) => {
  const NEED_MESSAGES_COUNT = 100

  const to = ctx.message.conversation_message_id
  const from = Math.max(0, ctx.message.conversation_message_id - (NEED_MESSAGES_COUNT - 1))

  const messagesIds = range(from, to)

  let messages

  try {
    const response = await ctx.bot.execute('messages.getByConversationMessageId', {
      conversation_message_ids: messagesIds,
      group_id: process.env.VK_GROUP_ID,
      peer_id: ctx.message.peer_id,
    })

    messages = response.items
  } catch (e) {
    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')
  }

  const reportMessages = messages.filter(message => message.text.trim() === CommandType.REPORT && !!message.reply_message)
  const nexiaMessages = messages.filter(message => addNexiaKeys.includes(message.text.trim()))

  const ignoreNexias = new Set(reportMessages.map(reportMessage => reportMessage.reply_message.conversation_message_id))

  const lostNexias = nexiaMessages.filter((nexiaMessage) => !ignoreNexias.has(nexiaMessage.conversation_message_id))

  if (!lostNexias.length) {
    return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–µ–∫—Å–∏–π. –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π')
  }

  let addedNexias = false
  
  for (let message of lostNexias) {
    const found = Boolean(await NexiaService.getByMessageId({ message_id: message.conversation_message_id }))

    if (found) {
      continue
    }

    await addNexiaCommand({
      ...ctx,
      message,
      reply: ctx.reply.bind(ctx),
    })

    addedNexias = true
  }

  return addedNexias
    ? ctx.reply('üéâ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–ø–∞—â–∏–µ –Ω–µ–∫—Å–∏–∏')
    : ctx.reply('üéâ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ü—Ä–æ–ø–∞—â–∏—Ö –Ω–µ–∫—Å–∏–π –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')
}

export default justiceCommand